UseCaseModel LoanProcessingSystem {

	UC::evaluateLoanRequest() definedBySSD(EvaluateLoanRequestSSD) relatedService(EvaluateLoanRequestModule) @Description( "The loan officer reviews the online information about the pending loan request to determine whether the loan should be approved" )
	UC::manageLoanTerm() relatedService(ManageLoanTermCRUDService)
	UC::enterValidatedCreditReferences()
	UC::generateLoanLetterAndAgreement() definedBySSD(GenerateLoanLetterAndAgreementSSD) relatedService(GenerateLoanLetterAndAgreementModule) @Description( "a loan clerk has the system genereate an approval letter for the applicant" )
	UC::bookNewLoan() @Description( "Once a loan aggrement has been sighed by the customer and returned to the bank, the loan clerk has the system create a loan account based on the agreed-on terms and conditions" )
	UC::loanPayment() @Description( "Payment is received from the customer, the loan clerk enters the payment into the appropriate loan account" )
	UC::closeOutLoan() @Description( "The loan has been paid in full by the customer, and the loan will be closed" )
	UC::generateStandardPaymentNotice() @Description( "when the monthly billing time occurs, the loan system genereates the bill statements for mailing to the customer" )
	UC::generateLateNotice() @Description( "The loan system genereates the late notice for mailling to the customer" )
	UC::submitLoanRequest() relatedService(SubmitLoanRequestModule)

	Actor LoanOfficer {
		@Description( "a loan officer is an officer of the bank who has the designated responsibilitiy of evaluating requests for a loan") evaluateLoanRequest
		manageLoanTerm
	}

	Actor LoanAssistant {
		@Description( "The loan assistant is responsible for manually capturing and entering into the system the credit information") enterValidatedCreditReferences
	}

	Actor LoanClerk {
		@Description( "The loan clerk is responsible for booking (recording and setting up) the loan") generateLoanLetterAndAgreement
		bookNewLoan
		loanPayment
		closeOutLoan
	}

	Actor Scheduler {
		generateStandardPaymentNotice
		generateLateNotice
	}

	Actor Applicant {
		@Description( "An applicant is an individual or organization who sumits an application for a loan to the bank") submitLoanRequest
	}

	Interaction EvaluateLoanRequestSSD {

		[Participants: LoanOfficer EvaluateLoanRequestModule]

		CallMessage::InteractionEvaluateLoanRequestModuleCallMessage1(listTenLoanRequest InteractionEvaluateLoanRequestModuleCallMessage1SendingEnd -> InteractionEvaluateLoanRequestModuleExecution1StartEnd)
		ReturnMessage::InteractionEvaluateLoanRequestModuleCallMessage1Return(InteractionEvaluateLoanRequestModuleExecution1FinishEnd -> InteractionEvaluateLoanRequestModuleCallMessage1ReturnReceivingEnd InteractionEvaluateLoanRequestModuleCallMessage1)
		CallMessage::InteractionEvaluateLoanRequestModuleCallMessage3(chooseOneForReview InteractionEvaluateLoanRequestModuleCallMessage3SendingEnd -> InteractionEvaluateLoanRequestModuleExecution2StartEnd)
		ReturnMessage::InteractionEvaluateLoanRequestModuleCallMessage3Return(InteractionEvaluateLoanRequestModuleExecution2FinishEnd -> InteractionEvaluateLoanRequestModuleCallMessage3ReturnReceivingEnd InteractionEvaluateLoanRequestModuleCallMessage3)
		CallMessage::InteractionEvaluateLoanRequestModuleCallMessage5(checkCreditHistory InteractionEvaluateLoanRequestModuleCallMessage5SendingEnd -> InteractionEvaluateLoanRequestModuleExecution3StartEnd)
		ReturnMessage::InteractionEvaluateLoanRequestModuleCallMessage5Return(InteractionEvaluateLoanRequestModuleExecution3FinishEnd -> InteractionEvaluateLoanRequestModuleCallMessage5ReturnReceivingEnd InteractionEvaluateLoanRequestModuleCallMessage5)
		CallMessage::InteractionEvaluateLoanRequestModuleCallMessage7(reviewCheckingAccount InteractionEvaluateLoanRequestModuleCallMessage7SendingEnd -> InteractionEvaluateLoanRequestModuleExecution4StartEnd)
		ReturnMessage::InteractionEvaluateLoanRequestModuleCallMessage7Return(InteractionEvaluateLoanRequestModuleExecution4FinishEnd -> InteractionEvaluateLoanRequestModuleCallMessage7ReturnReceivingEnd InteractionEvaluateLoanRequestModuleCallMessage7)
		CallMessage::InteractionEvaluateLoanRequestModuleCallMessage9(listAvaiableLoanTerm InteractionEvaluateLoanRequestModuleCallMessage9SendingEnd -> InteractionEvaluateLoanRequestModuleExecution5StartEnd)
		ReturnMessage::InteractionEvaluateLoanRequestModuleCallMessage9Return(InteractionEvaluateLoanRequestModuleExecution5FinishEnd -> InteractionEvaluateLoanRequestModuleCallMessage9ReturnReceivingEnd InteractionEvaluateLoanRequestModuleCallMessage9)
		CallMessage::InteractionEvaluateLoanRequestModuleCallMessage11(addLoanTerm InteractionEvaluateLoanRequestModuleCallMessage11SendingEnd -> InteractionEvaluateLoanRequestModuleExecution6StartEnd)
		ReturnMessage::InteractionEvaluateLoanRequestModuleCallMessage11Return(InteractionEvaluateLoanRequestModuleExecution6FinishEnd -> InteractionEvaluateLoanRequestModuleCallMessage11ReturnReceivingEnd InteractionEvaluateLoanRequestModuleCallMessage11)
		CallMessage::InteractionEvaluateLoanRequestModuleCallMessage13(approveLoanRequest InteractionEvaluateLoanRequestModuleCallMessage13SendingEnd -> InteractionEvaluateLoanRequestModuleExecution7StartEnd)
		ReturnMessage::InteractionEvaluateLoanRequestModuleCallMessage13Return(InteractionEvaluateLoanRequestModuleExecution7FinishEnd -> InteractionEvaluateLoanRequestModuleCallMessage13ReturnReceivingEnd InteractionEvaluateLoanRequestModuleCallMessage13)

		Execution::InteractionEvaluateLoanRequestModuleExecution1(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution1StartEnd InteractionEvaluateLoanRequestModuleExecution1FinishEnd)
		Execution::InteractionEvaluateLoanRequestModuleExecution2(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution2StartEnd InteractionEvaluateLoanRequestModuleExecution2FinishEnd)
		Execution::InteractionEvaluateLoanRequestModuleExecution3(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution3StartEnd InteractionEvaluateLoanRequestModuleExecution3FinishEnd)
		Execution::InteractionEvaluateLoanRequestModuleExecution4(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution4StartEnd InteractionEvaluateLoanRequestModuleExecution4FinishEnd)
		Execution::InteractionEvaluateLoanRequestModuleExecution5(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution5StartEnd InteractionEvaluateLoanRequestModuleExecution5FinishEnd)
		Execution::InteractionEvaluateLoanRequestModuleExecution6(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution6StartEnd InteractionEvaluateLoanRequestModuleExecution6FinishEnd)
		Execution::InteractionEvaluateLoanRequestModuleExecution7(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution7StartEnd InteractionEvaluateLoanRequestModuleExecution7FinishEnd)

		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage1SendingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage1)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution1StartEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution1)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution1FinishEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution1)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage1ReturnReceivingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage1Return)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage3SendingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage3)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution2StartEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution2)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution2FinishEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution2)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage3ReturnReceivingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage3Return)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage5SendingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage5)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution3StartEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution3)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution3FinishEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution3)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage5ReturnReceivingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage5Return)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage7SendingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage7)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution4StartEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution4)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution4FinishEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution4)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage7ReturnReceivingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage7Return)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage9SendingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage9)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution5StartEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution5)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution5FinishEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution5)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage9ReturnReceivingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage9Return)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage11SendingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage11)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution6StartEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution6)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution6FinishEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution6)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage11ReturnReceivingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage11Return)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage13SendingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage13)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution7StartEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution7)
		ExecutionEnd::InteractionEvaluateLoanRequestModuleExecution7FinishEnd(EvaluateLoanRequestModule InteractionEvaluateLoanRequestModuleExecution7)
		MessageEnd::InteractionEvaluateLoanRequestModuleCallMessage13ReturnReceivingEnd(LoanOfficer InteractionEvaluateLoanRequestModuleCallMessage13Return)

	}

	Interaction GenerateLoanLetterAndAgreementSSD {

		[Participants: LoanClerk GenerateLoanLetterAndAgreementModule]

		CallMessage::InteractionGenerateLoanLetterAndAgreementCallMessage1(listApprovalRequest InteractionGenerateLoanLetterAndAgreementCallMessage1SendingEnd -> InteractionGenerateLoanLetterAndAgreementExecution1StartEnd)
		ReturnMessage::InteractionGenerateLoanLetterAndAgreementCallMessage1Return(InteractionGenerateLoanLetterAndAgreementExecution1FinishEnd -> InteractionGenerateLoanLetterAndAgreementCallMessage1ReturnReceivingEnd InteractionGenerateLoanLetterAndAgreementCallMessage1)
		CallMessage::InteractionGenerateLoanLetterAndAgreementCallMessage3(genereateApprovalLetter InteractionGenerateLoanLetterAndAgreementCallMessage3SendingEnd -> InteractionGenerateLoanLetterAndAgreementExecution2StartEnd)
		ReturnMessage::InteractionGenerateLoanLetterAndAgreementCallMessage3Return(InteractionGenerateLoanLetterAndAgreementExecution2FinishEnd -> InteractionGenerateLoanLetterAndAgreementCallMessage3ReturnReceivingEnd InteractionGenerateLoanLetterAndAgreementCallMessage3)
		CallMessage::InteractionGenerateLoanLetterAndAgreementCallMessage5(emailToAppliant InteractionGenerateLoanLetterAndAgreementCallMessage5SendingEnd -> InteractionGenerateLoanLetterAndAgreementExecution3StartEnd)
		ReturnMessage::InteractionGenerateLoanLetterAndAgreementCallMessage5Return(InteractionGenerateLoanLetterAndAgreementExecution3FinishEnd -> InteractionGenerateLoanLetterAndAgreementCallMessage5ReturnReceivingEnd InteractionGenerateLoanLetterAndAgreementCallMessage5)
		CallMessage::InteractionGenerateLoanLetterAndAgreementCallMessage7(generateLoanAgreement InteractionGenerateLoanLetterAndAgreementCallMessage7SendingEnd -> InteractionGenerateLoanLetterAndAgreementExecution4StartEnd)
		ReturnMessage::InteractionGenerateLoanLetterAndAgreementCallMessage7Return(InteractionGenerateLoanLetterAndAgreementExecution4FinishEnd -> InteractionGenerateLoanLetterAndAgreementCallMessage7ReturnReceivingEnd InteractionGenerateLoanLetterAndAgreementCallMessage7)
		CallMessage::InteractionGenerateLoanLetterAndAgreementCallMessage9(printLoanAgreement InteractionGenerateLoanLetterAndAgreementCallMessage9SendingEnd -> InteractionGenerateLoanLetterAndAgreementExecution5StartEnd)
		ReturnMessage::InteractionGenerateLoanLetterAndAgreementCallMessage9Return(InteractionGenerateLoanLetterAndAgreementExecution5FinishEnd -> InteractionGenerateLoanLetterAndAgreementCallMessage9ReturnReceivingEnd InteractionGenerateLoanLetterAndAgreementCallMessage9)

		Execution::InteractionGenerateLoanLetterAndAgreementExecution1(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution1StartEnd InteractionGenerateLoanLetterAndAgreementExecution1FinishEnd)
		Execution::InteractionGenerateLoanLetterAndAgreementExecution2(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution2StartEnd InteractionGenerateLoanLetterAndAgreementExecution2FinishEnd)
		Execution::InteractionGenerateLoanLetterAndAgreementExecution3(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution3StartEnd InteractionGenerateLoanLetterAndAgreementExecution3FinishEnd)
		Execution::InteractionGenerateLoanLetterAndAgreementExecution4(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution4StartEnd InteractionGenerateLoanLetterAndAgreementExecution4FinishEnd)
		Execution::InteractionGenerateLoanLetterAndAgreementExecution5(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution5StartEnd InteractionGenerateLoanLetterAndAgreementExecution5FinishEnd)

		MessageEnd::InteractionGenerateLoanLetterAndAgreementCallMessage1SendingEnd(LoanClerk InteractionGenerateLoanLetterAndAgreementCallMessage1)
		ExecutionEnd::InteractionGenerateLoanLetterAndAgreementExecution1StartEnd(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution1)
		ExecutionEnd::InteractionGenerateLoanLetterAndAgreementExecution1FinishEnd(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution1)
		MessageEnd::InteractionGenerateLoanLetterAndAgreementCallMessage1ReturnReceivingEnd(LoanClerk InteractionGenerateLoanLetterAndAgreementCallMessage1Return)
		MessageEnd::InteractionGenerateLoanLetterAndAgreementCallMessage3SendingEnd(LoanClerk InteractionGenerateLoanLetterAndAgreementCallMessage3)
		ExecutionEnd::InteractionGenerateLoanLetterAndAgreementExecution2StartEnd(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution2)
		ExecutionEnd::InteractionGenerateLoanLetterAndAgreementExecution2FinishEnd(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution2)
		MessageEnd::InteractionGenerateLoanLetterAndAgreementCallMessage3ReturnReceivingEnd(LoanClerk InteractionGenerateLoanLetterAndAgreementCallMessage3Return)
		MessageEnd::InteractionGenerateLoanLetterAndAgreementCallMessage5SendingEnd(LoanClerk InteractionGenerateLoanLetterAndAgreementCallMessage5)
		ExecutionEnd::InteractionGenerateLoanLetterAndAgreementExecution3StartEnd(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution3)
		ExecutionEnd::InteractionGenerateLoanLetterAndAgreementExecution3FinishEnd(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution3)
		MessageEnd::InteractionGenerateLoanLetterAndAgreementCallMessage5ReturnReceivingEnd(LoanClerk InteractionGenerateLoanLetterAndAgreementCallMessage5Return)
		MessageEnd::InteractionGenerateLoanLetterAndAgreementCallMessage7SendingEnd(LoanClerk InteractionGenerateLoanLetterAndAgreementCallMessage7)
		ExecutionEnd::InteractionGenerateLoanLetterAndAgreementExecution4StartEnd(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution4)
		ExecutionEnd::InteractionGenerateLoanLetterAndAgreementExecution4FinishEnd(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution4)
		MessageEnd::InteractionGenerateLoanLetterAndAgreementCallMessage7ReturnReceivingEnd(LoanClerk InteractionGenerateLoanLetterAndAgreementCallMessage7Return)
		MessageEnd::InteractionGenerateLoanLetterAndAgreementCallMessage9SendingEnd(LoanClerk InteractionGenerateLoanLetterAndAgreementCallMessage9)
		ExecutionEnd::InteractionGenerateLoanLetterAndAgreementExecution5StartEnd(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution5)
		ExecutionEnd::InteractionGenerateLoanLetterAndAgreementExecution5FinishEnd(GenerateLoanLetterAndAgreementModule InteractionGenerateLoanLetterAndAgreementExecution5)
		MessageEnd::InteractionGenerateLoanLetterAndAgreementCallMessage9ReturnReceivingEnd(LoanClerk InteractionGenerateLoanLetterAndAgreementCallMessage9Return)

	}

	Service SubmitLoanRequestModule {

		[Operation]
		enterLoanInformation(requestid, name, loanamount, loanpurpose, income, phonenumber, postaladdress, zipcode, email, workreferences, creditreferences, checkingaccountnumber, securitynumber)
		creditRequest()
		accountStatusRequest()
		calculateScore()

		[TempProperty]
		currentLoanRequest : LoanRequest

	}

	Service ThirdPartyServices {

		[Operation]
		sendEmail(emailaddress, title, content)
		print(content, numbers)
		createLoanAccount(id)
		transferFunds(id, amount)
		getCreditHistory(securityid, name)
		getCheckingAccountStatus(cid)

	}

	Service EnterValidatedCreditReferencesModule {

		[Operation]
		listSubmitedLoanRequest()
		chooseLoanRequest(requestid)
		markRequestValid()

		[TempProperty]
		currentLoanRequest : LoanRequest
		currentLoanRequests : LoanRequest*

	}

	Service EvaluateLoanRequestModule {

		[Operation]
		listTenLoanRequest()
		chooseOneForReview(requestid)
		checkCreditHistory()
		reviewCheckingAccount()
		listAvaiableLoanTerm()
		addLoanTerm(termid)
		approveLoanRequest()

		[TempProperty]
		currentLoanRequest : LoanRequest
		currentLoanRequests : LoanRequest*

	}

	Service GenerateLoanLetterAndAgreementModule {

		[Operation]
		listApprovalRequest()
		genereateApprovalLetter(id)
		emailToAppliant()
		generateLoanAgreement()
		printLoanAgreement(number)

		[TempProperty]
		currentApprovalLetter : ApprovalLetter
		currentLoanAgreement : LoanAgreement
		currentLoanRequest : LoanRequest
		currentLoanRequests : LoanRequest*

	}

	Service LoanProcessingSystemSystem {

		[Operation]
		bookNewLoan(requestid, loanid, accountid, startdate, enddate, repaymentdays)
		generateStandardPaymentNotice()
		generateLateNotice()
		listBookedLoans()
		loanPayment(loanid)
		closeOutLoan(loanid)

	}

	Service ManageLoanTermCRUDService {

		[Operation]
		createLoanTerm(itemid, content)
		queryLoanTerm(itemid)
		modifyLoanTerm(itemid, content)
		deleteLoanTerm(itemid)

	}

//entity create operation 
	Contract  SubmitLoanRequestModule::enterLoanInformation(requestid : Integer, name : String, loanamount : Real, loanpurpose : String, income : Real, phonenumber : Integer, postaladdress : String, zipcode : Integer, email : String, workreferences : String, creditreferences : String, checkingaccountnumber : Integer, securitynumber : Integer) : Boolean {

		/* definition: find specific LoanRequest instance by requestid */
		definition:
			loanrequest:LoanRequest = LoanRequest.allInstance()->any(loa:LoanRequest | loa.RequestID = requestid)

		/* precondition: the instance loanrequest was not found in the system */
		precondition:
			loanrequest.oclIsUndefined() = true

		/* postcondition: 
		 * A LoanRequest instance loa was created.
		 * all properties of loa became the same values as inputs.
		 */
		postcondition:
			let loa:LoanRequest in
			loa.oclIsNew() and
			loa.RequestID = requestid and
			loa.Name = name and
			loa.LoanAmount = loanamount and
			loa.LoanPurpose = loanpurpose and
			loa.Income = income and
			loa.PhoneNumber = phonenumber and
			loa.PostalAddress = postaladdress and
			loa.ZipCode = zipcode and
			loa.Email = email and
			loa.WorkReferences = workreferences and
			loa.CreditReferences = creditreferences and
			loa.CheckingAccountNumber = checkingaccountnumber and
			loa.SecurityNumber = securitynumber and
			LoanRequest.allInstance()->includes(loa) and
			self.currentLoanRequest = loa and
			result = true
	}

	Contract SubmitLoanRequestModule::creditRequest() : Boolean {

		/* precondition: skeleton */
		precondition:
			self.currentLoanRequest.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			let his:CreditHistory in
			his.oclIsNew() and
			his = getCreditHistory(currentLoanRequest.SecurityNumber, currentLoanRequest.Name) and
			currentLoanRequest.RequestedCreditHistory = his and
			CreditHistory.allInstance()->includes(his) and
			result = true

	}

//Contract SubmitLoanRequestModule::accountStatusRequest Skeleton
	Contract SubmitLoanRequestModule::accountStatusRequest() : Boolean {

		/* precondition: skeleton */
		precondition:
			self.currentLoanRequest.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			let ca:CheckingAccount in
			ca.oclIsNew() and
			ca = getCheckingAccountStatus(self.currentLoanRequest.CheckingAccountNumber) and
			self.currentLoanRequest.RequestedCAHistory = ca and
			CheckingAccount.allInstance()->includes(ca) and
			result = true
	}

//Contract SubmitLoanRequestModule::calculateScore Skeleton
	Contract SubmitLoanRequestModule::calculateScore() : Integer {

		/* precondition: skeleton */
		precondition:
			self.currentLoanRequest.oclIsUndefined() = false and
			currentLoanRequest.RequestedCAHistory.oclIsUndefined() = false and
			currentLoanRequest.RequestedCreditHistory.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			// outstandingdebt,  baddebits,  balance,  checkingaccountstatus,  income 
			self.currentLoanRequest.CreditScore = 100 and
			self.currentLoanRequest.Status = LoanRequestStatus::SUBMITTED and
			result = self.currentLoanRequest.CreditScore
	}

// LoanStatus[SUBMITTED|REFERENCESVALIDATED|APPROVED|READYFORREVIEW|INCOMPLETEINFORMATION]
//Contract EnterValidatedCreditReferencesModule::listSubmitedLoanRequest Skeleton
	Contract EnterValidatedCreditReferencesModule::listSubmitedLoanRequest() : Set(LoanRequest) {

		definition:
			rs:Set(LoanRequest) = LoanRequest.allInstance()->select(r:LoanRequest | r.Status =  LoanRequestStatus::SUBMITTED)

		/* precondition: skeleton */
		precondition:
			rs.size() > 0

		/* postcondition: skeleton */
		postcondition:
			self.currentLoanRequests = rs and
			result = rs
	}

//Contract EnterValidatedCreditReferencesModule::chooseLoanRequest Skeleton
	Contract EnterValidatedCreditReferencesModule::chooseLoanRequest(requestid : Integer) : LoanRequest {

		definition:
			rs:LoanRequest = self.currentLoanRequests->any(r:LoanRequest | r.RequestID = requestid)

		/* precondition: skeleton */
		precondition:
			rs.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			self.currentLoanRequest = rs and
			result = rs
	}

//Contract EnterValidatedCreditReferencesModule::markRequestValid Skeleton
	Contract EnterValidatedCreditReferencesModule::markRequestValid() : Boolean {

		/* precondition: skeleton */
		precondition:
			self.currentLoanRequest.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			self.currentLoanRequest.Status = LoanRequestStatus::REFERENCESVALIDATED and
			result = true
	}

//Contract EvaluateLoanRequestModule::listTenLoanRequest Skeleton
	Contract EvaluateLoanRequestModule::listTenLoanRequest() : Set(LoanRequest) {

		definition:
			rs:Set(LoanRequest) = LoanRequest.allInstance()->select(r:LoanRequest | r.Status =  LoanRequestStatus::REFERENCESVALIDATED)

		/* precondition: skeleton */
		precondition:
			rs.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			self.currentLoanRequests = rs and
			result = rs
	}

//Contract EvaluateLoanRequestModule::chooseOneForReview Skeleton
	Contract EvaluateLoanRequestModule::chooseOneForReview(requestid : Integer) : LoanRequest {

		definition:
			rs:LoanRequest = self.currentLoanRequests->any(r:LoanRequest | r.RequestID = requestid)

		/* precondition: skeleton */
		precondition:
			rs.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			self.currentLoanRequest = rs and
			result = rs
	}

//Contract EvaluateLoanRequestModule::checkCreditHistory Skeleton
	Contract EvaluateLoanRequestModule::checkCreditHistory() : CreditHistory {

		/* precondition: skeleton */
		precondition:
			self.currentLoanRequest.oclIsUndefined() = false and
			currentLoanRequest.RequestedCreditHistory.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			result = currentLoanRequest.RequestedCreditHistory
	}

//Contract EvaluateLoanRequestModule::reviewCheckingAccount Skeleton
	Contract EvaluateLoanRequestModule::reviewCheckingAccount() : CheckingAccount {

		precondition:
			self.currentLoanRequest.oclIsUndefined() = false and
			currentLoanRequest.RequestedCAHistory.oclIsUndefined() = false

		postcondition:
			result = currentLoanRequest.RequestedCAHistory

	}

//Contract EvaluateLoanRequestModule::listAvaiableLoanTerm Skeleton
	Contract EvaluateLoanRequestModule::listAvaiableLoanTerm() : Set(LoanTerm) {

		/* precondition: skeleton */
		precondition:
			true

		/* postcondition: skeleton */
		postcondition:
			result = LoanTerm.allInstance()
	}

//Contract EvaluateLoanRequestModule::addLoanTerm Skeleton
	Contract EvaluateLoanRequestModule::addLoanTerm(termid : Integer) : Boolean {

		/* definition skeleton */
		definition:
			loanterm:LoanTerm = LoanTerm.allInstance()->any(loa:LoanTerm | loa.ItemID = termid)

		/* precondition: skeleton */
		precondition:
			self.currentLoanRequest.oclIsUndefined() = false and
			loanterm.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			currentLoanRequest.AttachedLoanTerms->includes(loanterm) and
			result = true
	}

//Contract EvaluateLoanRequestModule::approveLoanRequest Skeleton
	Contract EvaluateLoanRequestModule::approveLoanRequest() : Boolean {

		/* precondition: skeleton */
		precondition:
			self.currentLoanRequest.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			self.currentLoanRequest.Status = LoanRequestStatus::APPROVED and
			result = true
	}

//Contract GenerateLoanLetterAndAgreementModule::listApprovalRequest Skeleton
	Contract GenerateLoanLetterAndAgreementModule::listApprovalRequest() : Set(LoanRequest) {

		definition:
			rs:Set(LoanRequest) = LoanRequest.allInstance()->select(r:LoanRequest | r.Status =  LoanRequestStatus::APPROVED)

		/* precondition: skeleton */
		precondition:
			rs.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			self.currentLoanRequests = rs and
			result = rs
	}

//Contract GenerateLoanLetterAndAgreementModule::genereateApprovalLetter Skeleton
	Contract GenerateLoanLetterAndAgreementModule::genereateApprovalLetter(id : Integer) : Boolean {

		/* definition skeleton */
		definition:
			r:LoanRequest = LoanRequest.allInstance()->any(lr:LoanRequest | lr.RequestID = id)

		/* precondition: skeleton */
		precondition:
			r.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			let l:ApprovalLetter in
			l.oclIsNew() and
			l.Content = "ApprovalLetterContent" and
			r.AttachedApprovalLetter = l and
			self.currentLoanRequest = r and
			ApprovalLetter.allInstance()->includes(l) and
			result = true
	}

//Contract GenerateLoanLetterAndAgreementModule::emailToAppliant Skeleton
	Contract GenerateLoanLetterAndAgreementModule::emailToAppliant() : Boolean {

		/* precondition: skeleton */
		precondition:
			self.currentLoanRequest.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			// "Your Loan Request was approved"
			sendEmail(currentLoanRequest.Email, currentLoanRequest.Name, "Your Loan Request was approved") and
			result = true
	}

//Contract GenerateLoanLetterAndAgreementModule::generateLoanAgreement Skeleton
	Contract GenerateLoanLetterAndAgreementModule::generateLoanAgreement() : Boolean {

		/* precondition: skeleton */
		precondition:
			self.currentLoanRequest.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			let la:LoanAgreement in
			la.oclIsNew() and
			la.Content = "Loan Agreement" and
			self.currentLoanRequest.AttachedLoanAgreement = la and
			LoanAgreement.allInstance()->includes(la) and
			result = true
	}

//Contract GenerateLoanLetterAndAgreementModule::printLoanAgreement Skeleton
	Contract GenerateLoanLetterAndAgreementModule::printLoanAgreement(number : Integer) : Boolean {

		/* precondition: skeleton */
		precondition:
			self.currentLoanRequest.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			print(currentLoanRequest.AttachedLoanAgreement.Content, number) and
			result = true
	}

////entity create operation 
//Contract  GenerateLoanLetterAndAgreementModule::createLoanAccount(loanaccountid : Integer, balance : Real, status : LoanAccountStatus[NORMAL|HASPAIDINFULL]) : Boolean {
//	
//	/* definition: find specific LoanAccount instance by loanaccountid */
//	definition:
//		loanaccount:LoanAccount = LoanAccount.allInstance()->any(loa:LoanAccount | loa.LoanAccountID = loanaccountid)
//	
//	/* precondition: the instance loanaccount was not found in the system */
//	precondition:
//		loanaccount.oclIsUndefined() = true
//	
//	/* postcondition: 
//	 * A LoanAccount instance loa was created.
//	 * all properties of loa became the same values as inputs.
//	 */
//	postcondition:
//		let loa:LoanAccount in
//		loa.oclIsNew() and
//		loa.LoanAccountID = loanaccountid and
//		loa.Balance = balance and
//		loa.Status = status and
//		LoanAccount.allInstance()->includes(loa) and
//		result = true
//}
//entity create operation 
	Contract  LoanProcessingSystemSystem::bookNewLoan(requestid : Integer, loanid : Integer, accountid: Integer, startdate : Date, enddate : Date, repaymentdays : Integer) : Boolean {

		/* definition: find specific Loan instance by loanid */
		definition:
			loan:Loan = Loan.allInstance()->any(loa:Loan | loa.LoanID = loanid),
			r:LoanRequest = LoanRequest.allInstance()->any(lr:LoanRequest | lr.RequestID = requestid),
			la:LoanAccount = LoanAccount.allInstance()->any(lacc:LoanAccount | lacc.LoanAccountID = accountid)

		/* precondition: the instance loan was not found in the system */
		precondition:
			loan.oclIsUndefined() = true and
			r.oclIsUndefined() = false

		/* postcondition: 
		 * A Loan instance loa was created.
		 * all properties of loa became the same values as inputs.
		 */
		postcondition:
			let loa:Loan, lacc:LoanAccount in
			loa.oclIsNew() and
			loa.LoanID = loanid and
			loa.StartDate = startdate and
			loa.EndDate = enddate and
			loa.RePaymentDays = repaymentdays and
			loa.Status = LoanStatus::LSOPEN and
			loa.RepaymentAmount = r.LoanAmount and
			loa.CurrentOverDueDate = startdate.After(repaymentdays) and
			if
				la.oclIsUndefined() = true
			then
				lacc = createLoanAccount(accountid) and
				LoanAccount.allInstance()->includes(lacc) and
				lacc.Balance = r.LoanAmount and
				loa.BelongedLoanAccount = lacc
			else
				la.Balance = la.Balance@pre + r.LoanAmount
			endif and
			transferFunds(accountid, r.LoanAmount) and
			loa.RemainAmountToPay = r.LoanAmount and
			Loan.allInstance()->includes(loa) and
			r.ApprovalLoan = loa and
			loa.ReferedLoanRequest = r and
			result = true
	}

	Contract LoanProcessingSystemSystem::generateStandardPaymentNotice() : Boolean {

		/* definition skeleton */
		definition:
			loans:Set(Loan) = Loan.allInstance()->select(loa:Loan | loa.Status = LoanStatus::LSOPEN and Today.After(3).isAfter(loa.CurrentOverDueDate))

		/* precondition: skeleton */
		precondition:
			loans.oclIsUndefined() = false

		/* postcondition: skeleton 
		 *  	     		kkk
		 * 
		 * */
		postcondition:
			loans->forAll(l:Loan |
				sendEmail(l.ReferedLoanRequest.Email, "OverDueSoon", "You account is OverDueSoon"))
			and
			result = true
	}

	Contract LoanProcessingSystemSystem::generateLateNotice() : Boolean {

		/* definition skeleton */
		definition:
			loans:Set(Loan) = Loan.allInstance()->select(loa:Loan | loa.Status = LoanStatus::LSOPEN and Today.isAfter(loa.CurrentOverDueDate))

		/* precondition: skeleton */
		precondition:
			loans.oclIsUndefined() = false

		/* postcondition: skeleton */
		postcondition:
			loans->forAll(l:Loan |
				sendEmail(l.ReferedLoanRequest.Email, "OverDued", "You are overdued, please repayment ASAP"))
			and
			result = true
	}

//Contract LoanManagementModule::loanPayment Skeleton
	Contract LoanProcessingSystemSystem::loanPayment(loanid : Integer) : Boolean {

		/* definition skeleton */
		definition:
			loan:Loan = Loan.allInstance()->any(loa:Loan | loa.LoanID = loanid)

		/* precondition: skeleton */
		precondition:
			loan.oclIsUndefined() = false and
			loan.Status = LoanStatus::LSOPEN

		/* postcondition: skeleton */
		postcondition:
			loan.RemainAmountToPay = loan.RemainAmountToPay@pre - loan.RepaymentAmount and
			result = true
	}

//Contract LoanManagementModule::closeOutLoan Skeleton
	Contract LoanProcessingSystemSystem::closeOutLoan(loanid : Integer) : Boolean {

		/* definition skeleton */
		definition:
			loan:Loan = Loan.allInstance()->any(loa:Loan | loa.LoanID = loanid)

		/* precondition: skeleton */
		precondition:
			loan.oclIsUndefined() = false and
			loan.Status = LoanStatus::LSOPEN

		/* postcondition: skeleton */
		postcondition:
			loan.Status = LoanStatus::CLOSED and
			result = true
	}

//entity create operation 
	Contract  ManageLoanTermCRUDService::createLoanTerm(itemid : Integer, content : String) : Boolean {

		/* definition: find specific LoanTerm instance by itemid */
		definition:
			loanterm:LoanTerm = LoanTerm.allInstance()->any(loa:LoanTerm | loa.ItemID = itemid)

		/* precondition: the instance loanterm was not found in the system */
		precondition:
			loanterm.oclIsUndefined() = true

		/* postcondition: 
		 * A LoanTerm instance loa was created.
		 * all properties of loa became the same values as inputs.
		 */
		postcondition:
			let loa:LoanTerm in
			loa.oclIsNew() and
			loa.ItemID = itemid and
			loa.Content = content and
			LoanTerm.allInstance()->includes(loa) and
			result = true
	}

//entity query operation 
	Contract  ManageLoanTermCRUDService::queryLoanTerm(itemid : Integer) : LoanTerm {

		/* definition: find specific LoanTerm instance by itemid */
		definition:
			loanterm:LoanTerm = LoanTerm.allInstance()->any(loa:LoanTerm | loa.ItemID = itemid)

		/* precondition: the instance loanterm was found in the system */
		precondition:
			loanterm.oclIsUndefined() = false

		/* postcondition: return found the instance loanterm */
		postcondition:
			result = loanterm
	}

//entity modify operation 
	Contract  ManageLoanTermCRUDService::modifyLoanTerm(itemid : Integer, content : String) : Boolean {

		/* definition: find specific LoanTerm instance by itemid */
		definition:
			loanterm:LoanTerm = LoanTerm.allInstance()->any(loa:LoanTerm | loa.ItemID = itemid)

		/* precondition: the instance loanterm was found in the system */
		precondition:
			loanterm.oclIsUndefined() = false

		/* postcondition: all properties of loa became the same values as inputs. */
		postcondition:
			loanterm.ItemID = itemid and
			loanterm.Content = content and
			result = true
	}

//entity delete operation 
	Contract  ManageLoanTermCRUDService::deleteLoanTerm(itemid : Integer) : Boolean {

		/* definition: find specific LoanTerm instance by itemid */
		definition:
			loanterm:LoanTerm = LoanTerm.allInstance()->any(loa:LoanTerm | loa.ItemID = itemid)

		/* precondition: the instance loanterm was found in the system */
		precondition:
			loanterm.oclIsUndefined() = false and
			LoanTerm.allInstance()->includes(loanterm)

		/* postcondition: the instance loanterm was deleted from the system */
		postcondition:
			LoanTerm.allInstance()->excludes(loanterm) and
			result = true
	}

//Contract ThirdPartServices::getCheckingAccountStatus Skeleton
	Contract ThirdPartyServices::getCheckingAccountStatus(cid : Integer) : CheckingAccount {

		/* precondition: skeleton */
		precondition:
			true

		/* postcondition: skeleton */
		postcondition:
			result = null
	}

	Contract ThirdPartyServices::getCreditHistory(securityid : Integer, name :String) : CreditHistory {

		/* precondition: skeleton */
		precondition:
			true

		/* postcondition: skeleton */
		postcondition:
			result = null
	}

////Contract ThirdPartServices::sendEmail Skeleton
	Contract ThirdPartyServices::sendEmail(emailaddress : String, title : String, content :String) : Boolean {

		/* precondition: skeleton */
		precondition:
			true

		/* postcondition: skeleton */
		postcondition:
			result = true
	}

//Contract ThirdPartServices::print Skeleton
	Contract ThirdPartyServices::print(content : String, numbers : Integer) : Boolean {

		/* precondition: skeleton */
		precondition:
			true

		/* postcondition: skeleton */
		postcondition:
			result = true
	}

//Contract ThirdPartServices::createLoanAccount Skeleton
	Contract ThirdPartyServices::createLoanAccount(id : Integer) : LoanAccount {

		/* precondition: skeleton */
		precondition:
			true

		/* postcondition: skeleton */
		postcondition:
			result = null
	}

//Contract ThirdPartServices::TransferFunds Skeleton
	Contract ThirdPartyServices::transferFunds(id : Integer, amount : Real) : Boolean {

		/* precondition: skeleton */
		precondition:
			true

		/* postcondition: skeleton */
		postcondition:
			result = true
	}

	Contract LoanProcessingSystemSystem::listBookedLoans() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

}

DomainModel LoanProcessingSystem {

	// Submitted -> READYFORREVIEW -> REFERENCESVALIDATED -> APPROVED
	Entity LoanRequest {
		Status : LoanRequestStatus[SUBMITTED|REFERENCESVALIDATED|APPROVED|READYFORREVIEW|INCOMPLETEINFORMATION]
		RequestID : Integer
		Name : String
		LoanAmount : Real
		LoanPurpose : String
		Income : Real
		PhoneNumber : Integer
		PostalAddress : String
		ZipCode : Integer
		Email : String
		WorkReferences : String
		CreditReferences : String
		CheckingAccountNumber : Integer
		SecurityNumber : Integer
		CreditScore : Integer

		[Refer]
		ApprovalLoan : Loan Association
		RequestedCAHistory : CheckingAccount Association
		RequestedCreditHistory : CreditHistory Association
		AttachedApprovalLetter : ApprovalLetter Association
		AttachedLoanAgreement : LoanAgreement Association
		AttachedLoanTerms : LoanTerm* Association
		[INV]
		inv UniqueRequestID : LoanRequest.allInstance()->isUnique(l:LoanRequest | l.RequestID)
		inv CreditScoreGreatAndEqualZero : CreditScore >= 0
	}

	Entity Loan {
		LoanID : Integer
		RemainAmountToPay : Real
		Status : LoanStatus[LSOPEN|CLOSED]
		IsPaidinFull : Boolean
		StartDate : Date
		EndDate : Date
		CurrentOverDueDate : Date
		RePaymentDays : Integer
		RepaymentAmount : Real

		[Refer]
		ReferedLoanRequest : LoanRequest ! Association
		BelongedLoanAccount : LoanAccount Association
		[INV]
		inv UniqueLoanID : Loan.allInstance()->isUnique(l:Loan | l.LoanID)
		inv RemainAmountToPayGreatAndEqualZero : RemainAmountToPay >= 0
		inv RepaymentAmountGreatAndEqualZero : RepaymentAmount >= 0
		inv RePaymentDaysGreatAndEqualZero : RePaymentDays >= 0
	}

	Entity LoanTerm {
		ItemID : Integer
		Content : String
		[INV]
		inv UniqueLoanID : Loan.allInstance()->isUnique(l:Loan | l.LoanID)
	}

	Entity CheckingAccount {
		Balance : Real
		Status : CheckingAccountStatus[GOODSTANDING|SUSPENDED]
		[INV]
		inv BalanceGreatAndEqualZero : Balance >= 0
	}

	Entity CreditHistory {
		OutstandingDebt : Real
		BadDebits : Integer
		[INV]
		inv OutstandingDebtGreatAndEqualZero : OutstandingDebt >= 0
		inv BadDebitsGreatAndEqualZero : BadDebits >= 0
	}

	Entity LoanAccount {
		LoanAccountID : Integer
		Balance : Real
		Status : LoanAccountStatus[NORMAL|HASPAIDINFULL]
		[INV]
		inv UniqueLoanID : Loan.allInstance()->isUnique(l:Loan | l.LoanID)
		inv BalanceGreatAndEqualZero : Balance >= 0
	}

	Entity ApprovalLetter {
		Content : String
	}

	Entity LoanAgreement {
		@Description( "The loan agreement" ) Content : String
	}

}

