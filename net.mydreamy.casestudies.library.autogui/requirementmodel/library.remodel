Actor User {

	UC::searchBookByTitle()
	UC::searchBookByAuthor()
	UC::searchBookByISBN()
	UC::searchBookBySubject()
	UC::listBorrowHistory()
	UC::listHodingBook()
	UC::listOverDueBook()      
	UC::listReservationBook()
	UC::renewBook()
	UC::makeReservation()
	UC::recommendBook() 

} 

Actor Student extends User {

//	UC::studentLogin()  
//	UC::studentLogout()   
}

Actor Faculty extends User {
  
//	UC::FacultyLogout(in()  
//	UC::FacultyLog)   
}

Actor Librarian {

//	UC::librarianLogin()
//	UC::librarianLogout() 
	UC::searchBookByTitle()
	UC::searchBookByAuthor()
	UC::searchBookByISBN()
	UC::searchBookBySubject()
	UC::searchBookByBarCode()
	UC::payOverDueFee()
	UC::borrowBook()
	UC::renewBook()
	UC::returnBook()
	UC::listRecommendBook()
	UC::addBook()
	UC::deleteBook()
	UC::addSubject()
	UC::deleteSubject()
	UC::createStudent()
	UC::modifyStudent()
	UC::createFaculty()
	UC::modifyFaculty()
	UC::deleteUser()
	UC::queryUser()

}




Actor Administrator {

//	UC::AdministratorLogin()
//	UC::AdministratorLogout()
	UC::createLibrarian()
	UC::deleteLibrarian()
	UC::queryLibrarian()

}

Actor Timer {

	UC::checkOverDueandComputeOverDueFee()
	UC::dueSoonNotification()
	UC::countDownSuspensionDay()

}

Actor ThirdPartSystem {

	UC::sendNotificationEmail()

}

/* System Controller */
Service LibraryManagementSystem {

	[Operation]
	// for log in and out
//	studentLogin(username, password)
//	studentLogout()
//	FacultyLogin(username, password)
//	FacultyLogout()
//	AdministratorLogin(username, password)
//	AdministratorLogout()
	// for book
	searchBookByBarCode(barcode)
	searchBookByTitle(title)
	searchBookByAuthor(authorname)
	searchBookByISBN(ISBNnumber)
	searchBookBySubject(subject)
	addBook(book)
	deleteBook(barcode)
	addSubject()
	deleteSubject()
	recommendBook(userid, book)
	queryBookCopy(barcode)
	addBookCopy(callNo, copy)
	deleteBookCopy(barcode)
	makeReservation(uid, barcode)
	cannelReservation(uid, barcode)
	borrowBook(uid, barcode)
	renewBook(uid, barcode)
	returnBook(barcode)
	payOverDueFee(uid, fee, change)
	// list book
	listBorrowHistory(userid)
	listHodingBook(userid)
	listOverDueBook(userid)
	listReservationBook(userid)
	listRecommendBook(userid)
	// regular checking
	checkOverDueandComputeOverDueFee()
	dueSoonNotification()
	countDownSuspensionDay()
	// user management
	createStudent()
	modifyStudent()
	createFaculty()
	modifyFaculty()
	deleteUser(uid)
	queryUser(uid)
	
	createLibrarian(librarian)
	deleteLibrarian(librarianid)
	queryLibrarian(librarianid)

	[TempProperty]
}

Service ThirdPartServices {

	[Operation]
	sendNotificationEmail(user)

}



/* Domain Model */
@AutoCRUD
Entity User {

	/* Basic information */
	UserID : String
	Name : String
	Sex : Sex[M|F]
	Password : String
	Email : String
	Faculty : String
	/* Library related information */
	LoanedNumber : Integer
	BorrowStatus : BorrowStatus[NORMAL|SUSPEND]
	SuspensionDays : Integer
	OverDueFee : Real

	[Refer]
	LoanedBook : Loan*
	ReservedBook : Reserve*
	RecommendedBook : RecommendBook*

	[INV]
	inv UniqueUserID : User.allInstance()->isUnique(u:User | u.UserID)
	inv OverDueFeeGreatThanEqualZero : OverDueFee >= 0
	inv LoanedNumberGreatThanEqualZero : LoanedNumber >= 0
	inv SuspensionDaysGreatThanEqualZero : SuspensionDays >= 0

}

Entity Student extends User {

	Major : String
	Programme : Programme[BACHELOR|MASTER|PHD]
	RegistrationStatus : StudentStatus[GRADUATED|PROGRAMMING]

	[INV]
	inv StudentLoanLessThanEqualTwelve: Student.allInstance()->forAll(stu : Student | stu.LoanedNumber <= 12)
	inv StudentLoanedBookAssociationInvariants : super.LoanedBook.size() <= 12 ASSOCINV

}

Entity Faculty extends User {

	Position : FacultyPosition[ASSISTANTPROFESSORS|ASSOCIATEPROFESSOR|PROFESSOR|CHAIRPROFESSOR]
	Status : FacultyStatus[HASRETIRED|INPOSITION]

	[INV]
	inv FacultyLoanLessthanEqualTwentyFour: Student.allInstance()->forAll(stu : Student | stu.LoanedNumber <= 24)
	inv FacultyLoanedBookAssociationInvariants : super.LoanedBook.size() <= 24 ASSOCINV

}

Entity Book {

	CallNo : String
	Title : String
	Edition : String
	Author : String
	Publisher : String
	Description : String
	ISBn : String
	CopyNum: Integer

	[Refer]
	Copys : BookCopy*
	Subject : Subject*

	[INV]
	inv BookCallNoUnique : Book.allInstance()->isUnique(b:Book | b.CallNo)
	inv BookISBNUnique : Book.allInstance()->isUnique(b:Book | b.ISBn)
	inv BookCopyNumGreatThanEqualZero : CopyNum >= 0

}

Entity Subject {

	Name : String

	[Refer]
	SuperSubject : Subject
	SubSubject : Subject*

}

Entity BookCopy {

	Barcode : String
	Status : CopyStatus[AVAILABLE|INPROCESSING|LIBUSEONLY|ONHOLDSHELF|LOANED]
	Location : String
	IsReserved : Boolean

	[Refer]
	BookBelongs : Book
	LoanedRecord : Loan*
	ReservationRecord : Reserve*

	[INV]
	inv BarCodeUnique : BookCopy.allInstance()->isUnique(bc:BookCopy | bc.Barcode)

}

Entity Loan {

	LoanDate : Date
	RenewDate : Date
	DueDate : Date
	ReturnDate : Date
	RenewedTimes : Integer
	IsReturned : Boolean // for list loaning book and loaned book
	OverDueFee : Real
	OverDue3Days : Boolean
	OverDue10Days : Boolean
	OverDue17Days : Boolean
	OverDue31Days : Boolean

	[Refer]
	LoanedUser : User
	LoanedCopy : BookCopy
	LoanLibrarian : Librarian
	ReturnLibrarian : Librarian

	[INV]
	inv OverDueFeeGreatThanEqualZero : OverDueFee >= 0
	inv RenewedTimesLessThanEqualSix :  RenewedTimes >=0 and RenewedTimes <= 6
	inv LoanOverDueFeeGreatThanEqualZero : OverDueFee >= 0
	inv RenewDataAfterLoanDate : if (RenewDate.oclIsUndefined() = false) then RenewDate.isAfter(LoanDate) endif
	inv DueDateAfterLoanDate : DueDate.isAfter(LoanDate)
	inv ReturnDateAfterORSameLoanDate : if (ReturnDate.oclIsUndefined() = false) then ReturnDate.isAfter(LoanDate) or ReturnDate.isEqual(LoanDate) endif
	inv DueDateAfterORSameRenewDate : if (RenewDate.oclIsUndefined() = false) then DueDate.isAfter(RenewDate) or DueDate.isEqual(RenewDate) endif
	inv ReturnDateSameORAfterRenewDate : if (RenewDate.oclIsUndefined() = false and ReturnDate.oclIsUndefined() = false) then ReturnDate.isAfter(RenewDate) or ReturnDate.isEqual(RenewDate) endif

}
 
Entity Reserve {

	ReserveDate : Date
	IsReserveClosed : Boolean // for list all reserving book and reserved book 
 
	[Refer]      
	ReservedCopy : BookCopy
	ReservedUser : User

}

Entity RecommendBook extends Book {

	RecommendDate : Date

	[Refer]
	RecommendUser : User

	[INV]
	inv BookCallNoUnique : Book.allInstance()->isUnique(b:Book | b.CallNo)
	inv BookISBNUnique : Book.allInstance()->isUnique(b:Book | b.ISBn)
	inv BookCopyNumGreatThanEqualZero : super.CopyNum >= 0

}

Entity Administrator {

	AdminID : String
	UserName : String
	Password : String

	[INV]
	inv AdministratorIDUnique : Administrator.allInstance()->isUnique(a : Administrator | a.AdminID)

}

Entity Librarian {

	LibrarianID : String
	Name : String
	Password : String

	[INV] 
	inv LibrarianIDUnique : Librarian.allInstance()->isUnique(l:Librarian | l.LibrarianID)

}

/* -------------------- Contracts ----------------------*/
/* Search book */
Contract LibraryManagementSystem::searchBookByBarCode(barcode:String): Set(Book) {

	precondition:
		barcode.oclIsTypeOf(String)

	postcondition:
		result = Book.allInstance()->select(book:Book | book.Copys->exists(c:BookCopy | c.Barcode = barcode))
}

Contract LibraryManagementSystem::searchBookByTitle(title:String): Set(Book) {

	precondition:
		title <> ""

	postcondition:
		result = Book.allInstance()->select(book:Book | book.Title = title)         
}

Contract LibraryManagementSystem::searchBookByAuthor(authorname:String) : Set(Book) {

	precondition:
		authorname <> ""

	postcondition:
		result = Book.allInstance()->select(book:Book | book.Author = authorname)
}

Contract LibraryManagementSystem::searchBookByISBN(ISBNnumber:String): Set(Book) {

	precondition:
		ISBNnumber.oclIsTypeOf(String)

	postcondition:
		result = Book.allInstance()->select(book:Book | book.ISBn = ISBNnumber)
}

Contract LibraryManagementSystem::searchBookBySubject(subject:String): Set(Book) {

	precondition:
		subject.oclIsTypeOf(String)

	postcondition:
		result = Book.allInstance()->select(book:Book | book.Subject->exists(s:Subject | s.Name = subject))
}
                      
/* Main functions */
Contract LibraryManagementSystem::makeReservation(uid:String, barcode:String) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode)

	precondition:
		user.oclIsUndefined() = false and
		copy.oclIsUndefined() = false and
		copy.Status = CopyStatus::LOANED and
		copy.IsReserved = false

	postcondition:
		let res:Reserve in
		res.oclIsNew() and
		copy.IsReserved = true and
		res.IsReserveClosed = false and
		res.ReserveDate = Today and
		res.ReservedUser = user and
		res.ReservedCopy = copy and
		user.ReservedBook->includes(res) and
		copy.ReservationRecord->includes(res) and
		Reserve.allInstance()->includes(res) and
		result = true

}

Contract LibraryManagementSystem::cannelReservation(uid:String, barcode:String) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode),
		res:Reserve = Reserve.allInstance()->any(r:Reserve | r.ReservedCopy = copy and r.ReservedUser = user)

	precondition:
		user.oclIsUndefined() = false and
		copy.oclIsUndefined() = false and
		copy.Status = CopyStatus::LOANED and
		copy.IsReserved = true and
		res.oclIsUndefined() = false and
		res.IsReserveClosed = false

	postcondition:
		copy.IsReserved = false and
		res.IsReserveClosed = true and
		result = true

}

Contract LibraryManagementSystem::borrowBook(uid:String, barcode:String) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		stu:Student = Student.allInstance()->any(s:Student | s.UserID = uid),
		fac:Faculty = Faculty.allInstance()->any(f:Faculty | f.UserID = uid),
		copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode),
		res:Reserve = Reserve.allInstance()->any(r:Reserve | r.ReservedCopy = copy and r.ReservedUser = user and r.IsReserveClosed = false)

	precondition:
		user.oclIsUndefined() = false and
		copy.oclIsUndefined() = false and
		user.BorrowStatus = BorrowStatus::NORMAL and
		user.SuspensionDays = 0 and
		if
			user.oclIsTypeOf(Student)
		then
			if
				stu.Programme = Programme::BACHELOR
			then
				stu.LoanedNumber < 20
			else
				if
					stu.Programme = Programme::MASTER
				then
					stu.LoanedNumber < 40
				else
					stu.LoanedNumber < 60
				endif
			endif
		else
			fac.LoanedNumber < 60
		endif and
		(copy.Status = CopyStatus::AVAILABLE or
			(copy.Status = CopyStatus::ONHOLDSHELF and
				copy.IsReserved = true and
				res.oclIsUndefined() = false and
				res.IsReserveClosed = false
			)
		)

	postcondition:
		let loan:Loan in
		loan.oclIsNew() and
		loan.LoanedUser = user and
		loan.LoanedCopy = copy and
		loan.IsReturned = false and
		loan.LoanDate = Today and
		user.LoanedNumber = user.LoanedNumber@pre + 1 and
		user.LoanedBook->includes(loan) and
		copy.LoanedRecord->includes(loan) and
		if
			user.oclIsTypeOf(Student)
		then
			loan.DueDate = Today.After(30)
		else
			loan.DueDate = Today.After(60)
		endif and
		if
			copy.Status@pre = CopyStatus::ONHOLDSHELF
		then
			copy.IsReserved = false and
			res.IsReserveClosed = true
		endif and
		copy.Status = CopyStatus::LOANED and
		loan.OverDue3Days = false and
		loan.OverDue10Days = false and
		loan.OverDue17Days = false and
		loan.OverDue31Days = false and
		Loan.allInstance()->includes(loan) and
		result = true

}

Contract LibraryManagementSystem::returnBook(barcode:String) : Boolean {

	definition:
		copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode and bc.Status = CopyStatus::LOANED),
		loan:Loan = Loan.allInstance()->any(l:Loan | l.LoanedCopy = copy and l.IsReturned = false),
		loans:Set(Loan) = Loan.allInstance()->select(l:Loan | l.LoanedUser = loan.LoanedUser and l.IsReturned = false and l.DueDate.isAfter(Today)),
		res:Reserve = copy.ReservationRecord->any(r:Reserve | r.ReservedCopy = copy)

	precondition:
		copy.oclIsUndefined() = false and
		loan.oclIsUndefined() = false

	postcondition:
		loan.LoanedUser.LoanedNumber = loan.LoanedUser.LoanedNumber@pre - 1 and
		loan.IsReturned = true and
		loan.ReturnDate = Today and
		if
			copy.IsReserved = true
		then
			copy.Status = CopyStatus::ONHOLDSHELF and
			sendNotificationEmail(res.ReservedUser.Email)
		else
			copy.Status = CopyStatus::AVAILABLE
		endif and
		result = true
}

Contract LibraryManagementSystem::renewBook(uid:String, barcode:String) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		stu:Student = Student.allInstance()->any(s:Student | s.UserID = uid),
		fac:Faculty = Faculty.allInstance()->any(f:Faculty | f.UserID = uid),
		copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode and bc.Status = CopyStatus::LOANED),
		loan:Loan = Loan.allInstance()->any(l:Loan | l.LoanedUser = user and l.LoanedCopy = copy)

	precondition:
		user.BorrowStatus = BorrowStatus::NORMAL and
		user.oclIsUndefined() = false and
		copy.oclIsUndefined() = false and
		loan.oclIsUndefined() = false and
		copy.IsReserved = false and
		loan.DueDate.isAfter(Today) and
		if
			user.oclIsTypeOf(Student)
		then
			loan.RenewedTimes < 3
		else
			loan.RenewedTimes < 6
		endif and
		loan.OverDueFee = 0

	postcondition:
		loan.RenewedTimes = loan.RenewedTimes@pre + 1 and
		loan.RenewDate = Today and
		if
			user.oclIsTypeOf(Student)
		then
			if
				stu.Programme = Programme::BACHELOR
			then
				loan.DueDate = loan.DueDate@pre.After(20)
			else
				if
					stu.Programme = Programme::MASTER
				then
					loan.DueDate = loan.DueDate@pre.After(40)
				else
					loan.DueDate = loan.DueDate@pre.After(60)
				endif
			endif
		else
			loan.DueDate = loan.DueDate@pre.After(60)
		endif and
		result = true
}

Contract LibraryManagementSystem::payOverDueFee(uid:String, fee:Real) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		loans:Set(Loan) = Loan.allInstance()->select(l:Loan | l.LoanedUser = user and l.DueDate.isBefore(Today)and l.IsReturned = true and l.OverDueFee > 0)

	precondition:
		user.oclIsUndefined() = false and
		loans.notEmpty() and
		fee >= user.OverDueFee

	postcondition:
		user.OverDueFee = 0 and
		loans->forAll(l:Loan |
			l.OverDueFee = 0)
		and
		result = true
}

Contract LibraryManagementSystem::dueSoonNotification()  {

	precondition:
		true

	postcondition:
		let users:Set(User) = User.allInstance()->select(user:User | user.LoanedBook->exists(loan:Loan | 
			loan.IsReturned = false and Today.After(3).isAfter(loan.DueDate)
		)) in
		users->forAll(u:User |
			sendNotificationEmail(u.Email))
}

//Contract dueSoonNotification()  { 
//	precondition: true   
//	postcondition: let users:Set(User) = User.allInstance()->select(user:User | user.LoanedBook->exists(loan:Loan | loan.isReturned = false and Today.After(3) = loan.DueDate)) in 
//					users->forAll(u:User | sendNotificationEmail(u))
//}  
Contract LibraryManagementSystem::checkOverDueandComputeOverDueFee() {

	definition:
		loans:Set(Loan) = Loan.allInstance()->select(loan:Loan | loan.IsReturned = false and loan.DueDate.isBefore(Today))

	precondition:
		true

	postcondition:
		loans->forAll(loan:Loan |
			loan.IsReturned = false and
			if
				Today.Before(3).isAfter(loan.DueDate) and
				loan.OverDue3Days = false
			then
				loan.LoanedUser.BorrowStatus = BorrowStatus::SUSPEND and
				sendNotificationEmail(loan.LoanedUser.Email) and
				loan.OverDue3Days = true
			endif and
			if
				Today.Before(10).isAfter(loan.DueDate) and
				loan.OverDue10Days = false
			then
				loan.LoanedUser.SuspensionDays = loan.LoanedUser.SuspensionDays@pre + 14 and
				sendNotificationEmail(loan.LoanedUser.Email) and
				loan.OverDue10Days = true
			endif and
			if
				Today.Before(17).isAfter(loan.DueDate) and
				loan.OverDue17Days = false
			then
				loan.LoanedUser.SuspensionDays = loan.LoanedUser.SuspensionDays@pre + 30 and
				sendNotificationEmail(loan.LoanedUser.Email) and
				loan.OverDue17Days = true
			endif and
			if
				Today.Before(31).isAfter(loan.DueDate) and
				loan.OverDue31Days = false
			then
				loan.OverDueFee = 60 and
				sendNotificationEmail(loan.LoanedUser.Email) and
				loan.OverDue31Days = true and
				loan.LoanedUser.OverDueFee = loan.LoanedUser.OverDueFee@pre + loan.OverDueFee
			endif
		)
}

Contract LibraryManagementSystem::countDownSuspensionDay() {

	precondition:
		true

	postcondition:
		let users:Set(User) = User.allInstance()->select(u:User | u.SuspensionDays > 0) in
		users->forAll(u:User |
			u.SuspensionDays = u.SuspensionDays@pre - 1 and
			if
				u.BorrowStatus = BorrowStatus::SUSPEND and
				u.OverDueFee = 0 and
				u.SuspensionDays = 0
			then
				u.BorrowStatus = BorrowStatus::NORMAL
			endif
		)
}

/* List records */
Contract LibraryManagementSystem::listBorrowHistory(uid:String): Set(Loan) {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid)

	precondition:
		user.oclIsUndefined() = false /*postcondition: result = user.LoanedBook->collect(l:Loan| l.LoanedCopy)*/

	postcondition:
		result = user.LoanedBook

}

/*Contract listHodingBook(uid : Integer) : Set(BookCopy) {
 * 	definition: user:User = User.allInstance()->any(u:User | u.UserID = uid), 
 * 				loans:Set(Loan) = user.LoanedBook->select(l:Loan | l.isReturned = false)
 * 	precondition: user.oclIsUndefined() = false and loans.oclIsUndefined() = false
 * 	postcondition: result = loans->collect(l:Loan | l.LoanedCopy)   
 }*/
Contract LibraryManagementSystem::listHodingBook(uid:String): Set(Loan) {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid)

	precondition:
		user.oclIsUndefined() = false

	postcondition:
		result = user.LoanedBook->select(l:Loan | l.IsReturned = false)
}

Contract LibraryManagementSystem::listOverDueBook(uid:String): Set(BookCopy) {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		loans:Set(Loan) = user.LoanedBook->select(l:Loan | l.IsReturned = false and l.OverDueFee > 0)

	precondition:
		user.oclIsUndefined() = false and
		loans.oclIsUndefined() = false

	postcondition:
		result = loans->collect(l:Loan | l.LoanedCopy)
}

Contract LibraryManagementSystem::listReservationBook(uid:String): Set(BookCopy) {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		res:Set(Reserve) = user.ReservedBook

	precondition:
		user.oclIsUndefined() = false and
		res.oclIsUndefined() = false

	postcondition:
		result = res->collect(r:Reserve | r.ReservedCopy)
}

Contract LibraryManagementSystem::listRecommendBook(uid:String): Set(RecommendBook) {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		rBooks:Set(RecommendBook) = user.RecommendedBook

	precondition:
		user.oclIsUndefined() = false and
		rBooks.oclIsUndefined() = false

	postcondition:
		result = rBooks

}

/* For Book and Book Copy*/
Contract LibraryManagementSystem::recommendBook(uid:String, callNo : String, title : String, edition : String, author : String, publisher : String, description : String, isbn : String) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		rb:RecommendBook = RecommendBook.allInstance()->any(r:RecommendBook | r.CallNo = callNo)

	precondition:
		user.oclIsUndefined() = false and
		rb.oclIsUndefined() = true

	postcondition:
		let r:RecommendBook in
		r.oclIsNew() and
		r.CallNo = callNo and
		r.Title = title and
		r.Edition = edition and
		r.Author = author and
		r.Publisher = publisher and
		r.Description = description and
		r.ISBn = isbn and
		r.RecommendDate = Today and
		r.RecommendUser = user and
		user.RecommendedBook->includes(r) and
		RecommendBook.allInstance()->includes(r) and
		result = true
}

Contract LibraryManagementSystem::addSubject(name : String) : Boolean {
	
	definition:
		sub:Subject = Subject.allInstance()->any(s:Subject | s.Name = name)
		
	precondition:
		sub.oclIsUndefined() = true
		
	postcondition:
		let subject:Subject in
		subject.oclIsNew() and
		subject.Name = name and
		Subject.allInstance()->includes(subject) and
		result = true
}


	
Contract LibraryManagementSystem::deleteSubject(name : String) : Boolean {

	definition:
		sub:Subject = Subject.allInstance()->any(s:Subject | s.Name = name)	
	
	precondition:
		sub.oclIsUndefined() = false
		
	postcondition:
		Subject.allInstance()->excludes(sub) and 
		result = true
			
}

/* all primary attributes */
Contract LibraryManagementSystem::addBook(callNo : String, title : String, edition : String, author : String, publisher : String, description : String, isbn : String) : Boolean {

	definition:
		book:Book = Book.allInstance()->any(b:Book | b.CallNo = callNo)

	precondition:
		book.oclIsUndefined() = true

	postcondition:
		let b:Book in
		b.oclIsNew() and
		b.CallNo = callNo and
		b.Title = title and
		b.Edition = edition and
		b.Author = author and
		b.Publisher = publisher and
		b.Description = description and
		b.ISBn = isbn and
		b.CopyNum = 0 and
		Book.allInstance()->includes(b) and
		result = true
}

Contract LibraryManagementSystem::deleteBook(callNo:String) : Boolean {

	definition:
		book:Book = Book.allInstance()->any(b:Book | b.CallNo = callNo),
		bookcopys:Set(BookCopy) = book.Copys

	precondition:
		book.oclIsUndefined() = false and
		Book.allInstance()->includes(book)

	postcondition:
		BookCopy.allInstance()->excludesAll(bookcopys) and
		Book.allInstance()->excludes(book) and
		result = true
}

Contract LibraryManagementSystem::queryBookCopy(barcode:String): BookCopy {

	precondition:
		true

	postcondition:
		result = BookCopy.allInstance()->any(copy:BookCopy | copy.Barcode = barcode)
}

Contract LibraryManagementSystem::addBookCopy(callNo:String, barcode : String, location : String) : Boolean {

	definition:
		book:Book = Book.allInstance()->any(b:Book | b.CallNo = callNo),
		bc:BookCopy = book.Copys->any(c:BookCopy | c.Barcode = barcode)

	precondition:
		book.oclIsUndefined() = false and
		bc.oclIsUndefined() = true

	postcondition:
		let copy:BookCopy in
		copy.oclIsNew() and
		copy.Barcode = barcode and
		copy.Status = CopyStatus::AVAILABLE and
		copy.Location = location and
		copy.IsReserved = false and
		book.Copys->includes(copy) and  
		copy.BookBelongs = book and 
		book.CopyNum = book.CopyNum@pre + 1 and
		BookCopy.allInstance()->includes(copy) and
		result = true
}

Contract LibraryManagementSystem::deleteBookCopy(barcode:String) : Boolean {

	definition:
		copy:BookCopy = BookCopy.allInstance()->any(c:BookCopy | c.Barcode = barcode)

	precondition:
		copy.oclIsUndefined() = false and
		BookCopy.allInstance()->includes(copy)

	postcondition:
		BookCopy.allInstance()->excludes(copy) and
		result = true
}

///* For user account*/
//Contract LibraryManagementSystem::createUser(userID : Integer, name : String, sex : Sex[M|F], password : String, email : String, faculty : String ) : Boolean {
//
//	definition:
//		user:User = User.allInstance()->any(u:User | u.UserID = userID)
//
//	precondition:
//		user.oclIsUndefined() = true
//
//	postcondition:
//		let u:User in
//		u.oclIsNew() and
//		u.UserID = userID and
//		u.Name = name and
//		u.Email = email and
//		u.Password = password and
//		u.Sex = sex and
//		u.Faculty = faculty and
//		u.LoanedNumber = 0 and 
//		u.BorrowStatus = BorrowStatus::NORMAL and
//		u.SuspensionDays = 0 and
//		u.OverDueFee = 0 and
//		User.allInstance()->includes(u) and
//		result = true
//}

/* For student account*/
Contract LibraryManagementSystem::createStudent(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, major : String, programme : Programme[BACHELOR|MASTER|PHD], registrationStatus : StudentStatus[GRADUATED|PROGRAMMING]) : Boolean {

	definition: 
		user:Student = Student.allInstance()->any(u:Student | u.UserID = userID)

	precondition:
		user.oclIsUndefined() = true

	postcondition:
		let u:Student in
		u.oclIsNew() and
		u.UserID = userID and
		u.Name = name and
		u.Email = email and
		u.Password = password and
		u.Sex = sex and
		u.Faculty = faculty and
		u.LoanedNumber = 0 and
		u.BorrowStatus = BorrowStatus::NORMAL and
		u.SuspensionDays = 0 and
		u.OverDueFee = 0 and
		u.Major = major and
		u.Programme = programme and
		u.RegistrationStatus = registrationStatus and
		User.allInstance()->includes(u) and
		Student.allInstance()->includes(u) and
		result = true
}


Contract LibraryManagementSystem::modifyStudent(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, major : String, programme : Programme[BACHELOR|MASTER|PHD], registrationStatus : StudentStatus[GRADUATED|PROGRAMMING]) : Boolean {

	definition:
		user:Student = Student.allInstance()->any(u:Student | u.UserID = userID)

	precondition:
		user.oclIsUndefined() = false

	postcondition:
		user.UserID = userID and
		user.Name = name and
		user.Email = email and
		user.Password = password and
		user.Sex = sex and
		user.Faculty = faculty and
		user.LoanedNumber = 0 and
		user.BorrowStatus = BorrowStatus::NORMAL and
		user.SuspensionDays = 0 and
		user.OverDueFee = 0 and
		user.Major = major and
		user.Programme = programme and
		user.RegistrationStatus = registrationStatus and
		result = true
}

/* For faculty account*/
Contract LibraryManagementSystem::createFaculty(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, position : FacultyPosition[ASSISTANTPROFESSORS|ASSOCIATEPROFESSOR|PROFESSOR|CHAIRPROFESSOR], status : FacultyStatus[HASRETIRED|INPOSITION]) : Boolean {

	definition:
		user:Faculty = Faculty.allInstance()->any(u:Faculty | u.UserID = userID)

	precondition:
		user.oclIsUndefined() = true

	postcondition:
		let u:Faculty in
		u.oclIsNew() and
		u.UserID = userID and
		u.Name = name and
		u.Email = email and
		u.Password = password and
		u.Sex = sex and
		u.Faculty = faculty and
		u.LoanedNumber = 0 and
		u.BorrowStatus = BorrowStatus::NORMAL and
		u.SuspensionDays = 0 and
		u.OverDueFee = 0 and
		u.Position = position and
		u.Status = status and
		User.allInstance()->includes(u) and
		Faculty.allInstance()->includes(u) and
		result = true
}

/* For faculty account*/
Contract LibraryManagementSystem::modifyFaculty(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, major : String, position : FacultyPosition[ASSISTANTPROFESSORS|ASSOCIATEPROFESSOR|PROFESSOR|CHAIRPROFESSOR], status : FacultyStatus[HASRETIRED|INPOSITION]) : Boolean {

	definition:
		user:Faculty = Faculty.allInstance()->any(u:Faculty | u.UserID = userID)

	precondition:
		user.oclIsUndefined() = false

	postcondition:
		user.UserID = userID and
		user.Name = name and
		user.Email = email and
		user.Password = password and
		user.Sex = sex and
		user.Faculty = faculty and
		user.LoanedNumber = 0 and
		user.BorrowStatus = BorrowStatus::NORMAL and
		user.SuspensionDays = 0 and
		user.OverDueFee = 0 and
		user.Position = position and
		user.Status = status and
		result = true
}
//Contract LibraryManagementSystem::modifyUser(userID : Integer, name : String, password : String, email : String) : Boolean {
//
//	definition:
//		user:User = User.allInstance()->any(u:User | u.UserID = userID)
//
//	precondition:
//		user.oclIsUndefined() = false
//
//	postcondition:
//		user.UserID = userID and
//		user.Name = name and
//		user.Email = email and
//		user.Password = password and
//		result = true
//}

Contract LibraryManagementSystem::deleteUser(uid:String) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid)

	precondition:
		User.allInstance()->includes(user)

	postcondition:
		User.allInstance()->excludes(user) and
		result = true
}

Contract LibraryManagementSystem::queryUser(uid:String): User {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid)

	precondition:
		user.oclIsUndefined() = false

	postcondition:
		result = user             

}

/* For Librarian account */
Contract LibraryManagementSystem::createLibrarian(id : String, name:String, password:String) : Boolean {

	definition:
		librarian:Librarian = Librarian.allInstance()->any(lib:Librarian | lib.LibrarianID = id)

	precondition:
		librarian.oclIsUndefined() = true

	postcondition:
		let lib:Librarian in
		lib.oclIsNew() and
		lib.LibrarianID = id and
		lib.Name = name and
		lib.Password = password and
		Librarian.allInstance()->includes(lib) and
		result = true
}

Contract LibraryManagementSystem::deleteLibrarian(librarianID:String) : Boolean {

	definition:
		librarian:Librarian = Librarian.allInstance()->any(lib:Librarian | lib.LibrarianID = librarianID)

	precondition:
		Librarian.allInstance()->includes(librarian)

	postcondition:
		Librarian.allInstance()->excludes(librarian) and
		result = true
}
 
Contract LibraryManagementSystem::queryLibrarian(librarianID:String): Librarian {

	definition:
		librarian:Librarian = Librarian.allInstance()->any(lib:Librarian | lib.LibrarianID = librarianID)

	precondition:
		librarian.oclIsUndefined() = false

	postcondition:
		result = librarian

}

Contract ThirdPartServices::sendNotificationEmail(email: String) : Boolean {

	precondition:
		email <> ""

	postcondition:
		result = true

}
  
