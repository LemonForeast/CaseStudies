
Actor Cashier {

	UC::processSale()

}

Service CoCoMEProcessSale {

	[Operation]
	makeNewSale()
	enterItem(barcode, quantity)
	endSale()
	makeCashPayment(amount)
	makeCardPayment(cardAccountNumber, expiryDate)

	[TempProperty]
	currentSaleLine : SalesLineItem
	currentSale : Sale
	currentCashDesk : CashDesk
	currentStore : Store
	currentPaymentMethod : PaymentMethod[CASH|CARD]

	[WorkFlow]
	ProcessSaleWF
}

Service CoCoMEManagement {

	[Operation]
	createStore(store)
	createCashDesk(cashdesk)
	createProductCatalog(catalog)
	createItem(item)

	[TempProperty]
	[WorkFlow]
}

Service ThridPartServices {

	[Operation]
	thirdPartyCardPaymentService(cdp, expiryDate, currentSale)

}

/* System Work Flow, Not for runing, protocol for Actor inter-active with System */
Workflow ProcessSaleWF {

	[Cashier ThridPartServices]
	
	Cashier {
		
		ActivityStart

		makeNewSale	
	
     	
     	
     	endSale
	
		ForkNode -> (createCashDesk createStore hasMoreItems newCondition)
	
		createCashDesk 
	
		
		createStore
	
		Loop -> hasMoreItems {
	
			enterItem
		}
	
		Switch -> newCondition {
	
			case: case1 -> createItem
			case: case2 -> createProductCatalog
		}
		
		(createCashDesk createItem createProductCatalog hasMoreItems createStore) -> JoinNode
		
		ActivityFinal
		
		
	}
	
	ThridPartServices {
		
		thirdPartyCardPaymentService
		
	}



}

Interaction ProcessSaleInteraction {

	[Participants: Cashier CoCoMEProcessSale]

	CallMessage::makeNewSale(makeNewSale makeNewSaleSender->makeNewSaleStart)
	ReturnMessage::makeNewSaleReturn(makeNewSaleFinish->makeNewSaleReturnReceiver makeNewSale)
	CallMessage::enterItem(enterItem enterItemSender->enterItemStart)
	ReturnMessage::enterItemReturn(enterItemFinish->enterItemReturnReceiver enterItem)
	CallMessage::endSale(endSale endSaleSender->endSaleStart)
	ReturnMessage::endSaleReturn(endSaleFinish->endSaleReturnReceiver endSale)
	CallMessage::makeCashPayment(makeCashPayment makeCashPaymentSender->makeCashPaymentStart)
	ReturnMessage::makeCashPaymentReturn(makeCashPaymentFinish->makeCashPaymentReturnReceiver makeCashPayment)
	CallMessage::makeCardPayment(makeCardPayment makeCardPaymentSender->makeCardPaymentStart)
	ReturnMessage::makeCardPaymentReturn(makeCardPaymentFinish->makeCardPaymentReturnReceiver makeCardPayment)

	Execution::makeNewSale(CoCoMEProcessSale makeNewSaleStart makeNewSaleFinish)
	Execution::enterItem(CoCoMEProcessSale enterItemStart enterItemFinish)
	Execution::endSale(CoCoMEProcessSale endSaleStart endSaleFinish)
	Execution::makeCashPayment(CoCoMEProcessSale makeCashPaymentStart makeCashPaymentFinish)
	Execution::makeCardPayment(CoCoMEProcessSale makeCardPaymentStart makeCardPaymentFinish)

	CombinedFragment::enterItemLoop->loop {

		[Participants: Cashier CoCoMEProcessSale]

		enterItemLoopStart->enterItemLoopFinish

		Operand::hasMoreItems(hasMoreItemsStart enterItemLoopFinish)
	}

	CombinedFragment::PaymentMethodAlt->alt {

		[Participants: Cashier CoCoMEProcessSale]

		PaymentMethodAltStart->PaymentMethodAltFinish

		Operand::Cash(CashStart CardStart)
		Operand::Card(CardStart PaymentMethodAltFinish)
	}

	MessageEnd::makeNewSaleSender(Cashier makeNewSale)
	ExecutionEnd::makeNewSaleStart(CoCoMEProcessSale makeNewSale)
	ExecutionEnd::makeNewSaleFinish(CoCoMEProcessSale makeNewSale)
	MessageEnd::makeNewSaleReturnReceiver(Cashier makeNewSaleReturn)
	CombinedFragmentEnd::enterItemLoopStart(enterItemLoop)
	OperandEnd::hasMoreItemsStart(hasMoreItems)
	MessageEnd::enterItemSender(Cashier enterItem)
	ExecutionEnd::enterItemStart(CoCoMEProcessSale enterItem)
	ExecutionEnd::enterItemFinish(CoCoMEProcessSale enterItem)
	MessageEnd::enterItemReturnReceiver(Cashier enterItemReturn)
	CombinedFragmentEnd::enterItemLoopFinish(enterItemLoop)
	MessageEnd::endSaleSender(Cashier endSale)
	ExecutionEnd::endSaleStart(CoCoMEProcessSale endSale)
	ExecutionEnd::endSaleFinish(CoCoMEProcessSale endSale)
	MessageEnd::endSaleReturnReceiver(Cashier endSaleReturn)
	CombinedFragmentEnd::PaymentMethodAltStart(PaymentMethodAlt)
	OperandEnd::CashStart(Cash)
	MessageEnd::makeCashPaymentSender(Cashier makeCashPayment)
	ExecutionEnd::makeCashPaymentStart(CoCoMEProcessSale makeCashPayment)
	ExecutionEnd::makeCashPaymentFinish(CoCoMEProcessSale makeCashPayment)
	MessageEnd::makeCashPaymentReturnReceiver(Cashier makeCashPaymentReturn)
	OperandEnd::CardStart(Card)
	MessageEnd::makeCardPaymentSender(Cashier makeCardPayment)
	ExecutionEnd::makeCardPaymentStart(CoCoMEProcessSale makeCardPayment)
	ExecutionEnd::makeCardPaymentFinish(CoCoMEProcessSale makeCardPayment)
	MessageEnd::makeCardPaymentReturnReceiver(Cashier makeCardPaymentReturn)
	CombinedFragmentEnd::PaymentMethodAltFinish(PaymentMethodAlt)

}

Entity Store {

	Id : Integer
	Name : String
	Address : String

	[Refer]
	Cashdeskes : CashDesk*
	Productcatalogs : ProductCatalog*
	Items : Item*
	Cashiers : Cashier*
	Sales : Sale*

}

Entity ProductCatalog {

	Id : Integer
	Name : String

	[Refer]
	ContainedItems : Item*

}

Entity CashDesk {

	Id : Integer

	[Refer]
	ContainedSales : Sale*
	BelongedStore : Store

}

Entity Sale {

	Time : Date
	IsComplete: Boolean
	Amount : Real
	IsReadytoPay : Boolean

	[Refer]
	Belongedstore : Store
	BelongedCashDesk : CashDesk
	ContainedSalesLine : SalesLineItem*
	AssoicatedPayment : Payment

}

Entity Cashier {

	Id : Integer
	Name : String

	[Refer]
	WorkedStore : Store

}

Entity SalesLineItem {

	Quantity : Integer
	Subamount : Real

	[Refer]
	BelongedSale : Sale
	BelongedItem : Item

}

Entity Item {

	Barcode : Integer
	Description : String
	Price : Real

	[Refer]
	BelongedCatalog : ProductCatalog

}

Entity Payment {

	AmountTendered : Real

	[Refer]
	BelongedSale : Sale

}

Entity CashPayment extends Payment {

	Balance : Real

}

Entity CardPayment extends Payment {

	CardAccountNumber : String
	ExpiryDate : Date

}

Contract CoCoMEProcessSale::makeNewSale()  {
				 
	/* preconditions:  none */
	precondition: true
	
	/* postconditions: 
	 * A sale instance s was created (instance creation).
	 * s was associated with the current CashDesk (association formed)
	 * Attribute IsComplete of s was initialized as false. (object initialization)
	 * currentSale became s
	 */ 
	postcondition:  let s:Sale in s.oclIsNew() and 
					s.BelongedCashDesk = currentCashDesk and currentCashDesk.ContainedSales->includes(s) and 
					s.IsComplete = false and s.IsReadytoPay = false and 
					self.currentSale = s  
}

Contract CoCoMEProcessSale::enterItem(barcode : Integer, quantity : Integer) {
	
	/* Definition: find specific Item instance by barcode */
	definition: item:Item = Item.allInstance()->any(i:Item | i.Barcode = barcode)
	
	/* Precondition: there is a sale underway */
	precondition: currentSale.IsComplete = false 
	
	/**
	 * A salesLineItem instance sli was created (instance creation).
	 * sli was associated with the current Sale (association formed).
	 * sli.quantity became quantity (attribute modification).
	 * sli was associated with a Item (association formed). 
	 * subamount became item.price * quantity 
	 */
	 postcondition : let sli:SalesLineItem in sli.oclIsNew() and self.currentSaleLine = sli and 
	 				 sli.BelongedSale = currentSale and currentSale.ContainedSalesLine->includes(sli) and 
	 				 sli.Quantity = quantity and 
	 				 sli.BelongedItem = item and 
	 				 sli.Subamount = item.Price * quantity  
	 				 
}


Contract CoCoMEProcessSale::endSale() {
	
	/* Precondition: there is a sale underway and no more items. */
	precondition: currentSale.IsComplete = false and currentSale.IsReadytoPay = false
	
	/**
	 * Postcondition: 
	 * add all sub amount of SalesLineItem up to the Amount of currentSale (compute amount).
	 * currentSale.IsReadytoPay became true
	 */
	postcondition: currentSale.ContainedSalesLine->forAll(sl : SalesLineItem | currentSale.Amount = currentSale.Amount@pre + sl.Subamount) and currentSale.IsReadytoPay = true  
}

Contract CoCoMEProcessSale::makeCashPayment(amount : Real) {
	
	/* Precondition: There is a sale underway, the sale is ready to pay, and tendered amount is greater than or equal to the amount of current Sale*/
	precondition: currentSale.IsComplete = false and  currentSale.IsReadytoPay = true and amount >= currentSale.Amount 
	 
	/**
	 * A CashPayment instance cp was created (instance creation).
	 * cp.amountTendered became amount (attribute modification).
	 * cp was associated with the current Sale (association formed).
	 * The current Sale was associated with the Store (association formed).
	 * Sale.isComplete became true (attribute modification).
	 * Sale.time became now  (attribute modification).
	 * cp.Balance became the value of tendered amount minus current Sale amount
	 */
	 postcondition: let cp:CashPayment in cp.oclIsNew() and 
	 				cp.AmountTendered = amount and 
	 				cp.BelongedSale = currentSale and currentSale.AssoicatedPayment = cp  
	 				and currentSale.Belongedstore = currentStore and currentStore.Sales->includes(currentSale) and 
	 				currentSale.IsComplete = true and currentSale.Time = Now and  
	 				cp.Balance = amount - currentSale.Amount  
	  
}

Contract CoCoMEProcessSale::makeCardPayment(cardAccountNumber : String, expiryDate : Date) {
	
	/* Precondition: An underway sale exists and all items have been entered. */
	precondition:  currentSale.IsComplete = false and currentSale.IsReadytoPay = true 
	
	/**
	 * a CardPayment cdp was created
	 * cdp was associated with the current Sale
	 * cdp.CardAccountNumber = cardAccountNumber, cdp.expiryDate = expiryDate
	 * invoke third party card payment service 
	 * sale was associated with the Store as a completed sale
	 * The current sale is complete
	 * Sale.time became now 
	 */
	 postcondition: let cdp:CardPayment in cdp.oclIsNew() and 
	 				cdp.BelongedSale = currentSale and currentSale.AssoicatedPayment = cdp and 
	 				cdp.CardAccountNumber = cardAccountNumber and cdp.ExpiryDate = expiryDate and 
	 				thirdPartyCardPaymentService(cdp, expiryDate, currentSale) and 
	 				currentSale.Belongedstore = currentStore and currentStore.Sales->includes(currentSale) and 
	 				currentSale.IsComplete = true and currentSale.Time = Now 
	 
} 

Contract  ThridPartServices::thirdPartyCardPaymentService(cdp : CardPayment, expiryDate : Date, currentSale : Sale)  {
	precondition: true
	postcondition: true
}

Contract CoCoMEManagement::createStore(store : Store) {
	
	precondition: Store.allInstance()->excludes(store)
	postcondition: Store.allInstance()->includes(store)  
	
}

Contract CoCoMEManagement::createCashDesk(cashdesk : CashDesk, storeid : Integer) {
	
	definition: store:Store = Store.allInstance()->any(s:Store | s.Id = storeid)
	precondition: store.oclIsUndefined() = false and store.Cashdeskes->excludes(cashdesk) and CashDesk.allInstance()->excludes(cashdesk)
	postcondition: store.Cashdeskes->includes(cashdesk) and cashdesk.BelongedStore = store and CashDesk.allInstance()->includes(cashdesk) 
	
}

Contract CoCoMEManagement::createProductCatalog(catalog : ProductCatalog) {
	precondition: ProductCatalog.allInstance()->excludes(catalog)
	postcondition: ProductCatalog.allInstance()->includes(catalog)
}

Contract CoCoMEManagement::createItem(item : Item, catalogid : Integer) {
	
	definition: catalog:ProductCatalog = ProductCatalog.allInstance()->any(pc:ProductCatalog | pc.Id = catalogid)
	precondition: catalog.oclIsUndefined() = false and catalog.ContainedItems->excludes(item) and Item.allInstance()->excludes(item)
	postcondition: item.BelongedCatalog = catalog and catalog.ContainedItems->includes(item) and Item.allInstance()->includes(item)
}